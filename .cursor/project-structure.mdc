# YouTube Deep Summary - Project Structure

## Overview
YouTube Deep Summary is a comprehensive toolkit for downloading YouTube transcripts with AI-powered summarization using GPT-4.1, and a responsive web interface with Supabase database integration.

## Project Architecture

The project follows a clean modular architecture with clear separation of concerns:

```
youtube-deepsearch/
├── app.py                          # Main Flask application entry point
├── .cursor/                        # IDE-specific files and documentation
│   └── project-structure.mdc       # This file - comprehensive project structure
├── src/                            # Source code modules (modular architecture)
│   ├── __init__.py                 # Package initialization
│   ├── config.py                   # Configuration management with environment variables
│   ├── database_storage.py         # Supabase database integration for persistent storage
│   ├── legacy_file_storage.py      # Legacy file-based storage (deprecated)
│   ├── transcript_extractor.py     # YouTube transcript extraction with multiple methods
│   ├── chapter_extractor.py        # YouTube chapter extraction using yt-dlp
│   ├── summarizer.py               # OpenAI GPT-4.1 powered AI summarization
│   ├── transcript_formatter.py     # Transcript formatting (readability, timestamps, SRT)
│   ├── transcript_summarizer.py    # Legacy summarization module (partially deprecated)
│   ├── snippet_manager.py          # Memory snippets business logic (grouping, filtering, validation)
│   ├── video_processing.py         # Video processing pipeline orchestration
│   ├── youtube_api.py              # YouTube Data API integration
│   ├── routes/                     # Flask blueprints for web interface
│   │   ├── __init__.py
│   │   ├── api.py                  # RESTful API endpoints
│   │   ├── channels.py             # Channel management routes
│   │   ├── main.py                 # Main routes (home, redirects, favicon)
│   │   ├── snippets.py             # Memory snippets management
│   │   └── videos.py               # Video display and transcript viewing
│   └── utils/                      # Utility functions and helpers
│       ├── __init__.py
│       └── helpers.py              # Video ID extraction, markdown conversion, URL parsing
├── tools/                          # Command-line tools
│   ├── download_transcript.py      # Main CLI tool using youtube-transcript-api
│   ├── simple_transcript.py        # Alternative CLI tool using yt-dlp
│   └── download_transcript_manual.py # Manual web scraping CLI tool
├── scripts/                        # Utility scripts for maintenance
│   └── update_channel_handles.py   # Update YouTube channel handles in database
├── tests/                          # Test files and debugging scripts
│   └── test_chapters.py            # Test script for debugging chapter extraction
├── sql/                            # Database SQL files and migrations
│   ├── create_tables.sql           # Main database schema for Supabase
│   ├── create_memory_snippets_table.sql # Memory snippets table
│   ├── migration_steps.sql         # Migration instructions
│   ├── migration_fixed.sql         # Fixed migration script
│   ├── add_handle_column.sql       # Add handle column migration
│   ├── add_title_description_columns.sql # Add title/description columns
│   ├── remove_uploader_column.sql  # Remove uploader column migration
│   ├── migrate_channels.sql        # Channel migration script
│   └── fix_foreign_key_relationship.sql # Foreign key fixes
├── templates/                      # HTML templates for web interface
│   ├── base.html                   # Base template with common layout
│   ├── index.html                  # Home page template
│   ├── transcript.html             # Video transcript display
│   ├── videos.html                 # Videos listing page
│   ├── channels.html               # Channels listing page
│   ├── channel_overview.html       # Channel overview hub
│   ├── channel_videos.html         # Channel-specific videos
│   ├── channel_summaries.html      # Channel-specific summaries
│   ├── snippets.html               # Memory snippets display
│   ├── snippet_channels.html       # Snippets grouped by channel
│   └── error.html                  # Error page template
├── static/                         # Static assets
│   ├── favicon.svg                 # Main favicon
│   ├── favicon-16x16.png          # Small favicon
│   ├── favicon-32x32.png          # Medium favicon
│   └── favicon_old_backup.ico     # Backup favicon
├── .env                           # Environment variables (not in repo)
├── requirements.txt               # Python dependencies
├── Dockerfile                     # Docker containerization
├── start_server.sh               # Server startup script
├── README.md                      # Project documentation
├── CLAUDE.md                      # Development guidelines
└── URL_PATH_FEATURE.md           # Feature documentation
```

## Directory Purposes

### `/src` - Source Code Modules
**Purpose**: Contains all the core application logic organized into logical modules.

**Architecture Pattern**: Modular design with Flask blueprints for clean separation of concerns.

**Key Components**:
- **Configuration Layer**: `config.py` - Centralized environment management
- **Data Layer**: `utils/helpers.py` - Video ID extraction, URL parsing
- **Storage Layer**: `database_storage.py` - Supabase database operations
- **Core Processing Layer**: 
  - `transcript_extractor.py` - YouTube transcript extraction with language fallback
  - `chapter_extractor.py` - Video chapter extraction using yt-dlp
  - `summarizer.py` - AI-powered summarization with OpenAI GPT-4.1
  - `transcript_formatter.py` - Multiple transcript formatting options
- **Business Logic Layer**: `video_processing.py`, `youtube_api.py`, `snippet_manager.py`
- **Presentation Layer**: `routes/` - Flask blueprints for web interface

### `/tools` - Command-Line Tools
**Purpose**: Standalone command-line utilities for transcript extraction.

**Usage Examples**:
```bash
# Main implementation with proxy support
python3 tools/download_transcript.py "https://www.youtube.com/watch?v=VIDEO_ID" [proxy_ip]

# yt-dlp alternative
python3 tools/simple_transcript.py "https://www.youtube.com/watch?v=VIDEO_ID"

# Manual web scraping fallback
python3 tools/download_transcript_manual.py "https://www.youtube.com/watch?v=VIDEO_ID"
```

### `/scripts` - Utility Scripts
**Purpose**: Maintenance and administrative scripts for database operations.

**Examples**:
- `update_channel_handles.py` - Updates YouTube channel handles using YouTube Data API

### `/tests` - Testing
**Purpose**: Test files and debugging utilities.

**Usage**:
```bash
# Test chapter extraction functionality
python3 tests/test_chapters.py

# Test modular components
python3 -c "from src.transcript_extractor import extract_transcript; print('✓ Transcript extraction function available')"
python3 -c "from src.chapter_extractor import extract_video_info; print('✓ Video info extraction function available')"
python3 -c "from src.summarizer import summarize_transcript_with_chapters; print('✓ Chapter-aware summarization available')"

# Test all new components together
python3 -c "
from src.transcript_extractor import transcript_extractor
from src.chapter_extractor import chapter_extractor
from src.summarizer import summarizer
from src.transcript_formatter import transcript_formatter
print('✓ All modular components imported successfully')
print(f'OpenAI configured: {summarizer.is_configured()}')
"
```

### `/sql` - Database Schema and Migrations
**Purpose**: Database schema definitions and migration scripts for Supabase.

**File Categories**:
- **Schema**: `create_tables.sql` - Main database schema
- **Features**: `create_memory_snippets_table.sql` - Feature-specific tables
- **Migrations**: `migration_*.sql` - Schema evolution scripts
- **Modifications**: `add_*.sql` - Column additions
- **Fixes**: `fix_*.sql` - Database corrections

### `/templates` - HTML Templates
**Purpose**: Jinja2 templates for the responsive web interface.

**Template Structure**:
- `base.html` - Common layout and styling
- Page-specific templates for different features
- Mobile-responsive design with proper navigation

### `/static` - Static Assets
**Purpose**: CSS, JavaScript, images, and other static files.

**Contents**:
- Favicon files in multiple formats
- Static assets for web interface

## Module Dependencies

```
app.py
├── src/config.py
├── src/database_storage.py
└── src/routes/
    ├── main.py
    ├── api.py
    ├── channels.py
    ├── videos.py
    └── snippets.py
        ├── src/video_processing.py (orchestrates)
        │   ├── src/transcript_extractor.py
        │   ├── src/chapter_extractor.py
        │   ├── src/summarizer.py
        │   └── src/transcript_formatter.py
        ├── src/snippet_manager.py
        ├── src/youtube_api.py
        └── src/utils/helpers.py
```

## Key Features by Module

### Core Business Logic
- **Video Processing**: Complete pipeline orchestration from URL to AI summary
- **Transcript Extraction**: Multiple methods (youtube-transcript-api, yt-dlp, manual)
- **Chapter Extraction**: Video chapter detection and metadata extraction
- **AI Summarization**: GPT-4.1 powered structured summaries with chapter awareness
- **Transcript Formatting**: Multiple output formats (readability, timestamps, SRT)
- **Memory Snippets Management**: Business logic for snippet creation, grouping, and filtering
- **YouTube API Integration**: Channel information and video metadata
- **Database Operations**: Persistent storage with Supabase

### Web Interface
- **RESTful API**: JSON endpoints for programmatic access
- **Responsive UI**: Mobile-optimized interface
- **Channel Management**: Handle-based routing with SEO-friendly URLs
- **Memory Snippets**: Personal knowledge base with tagging

### Command-Line Tools
- **Multiple Methods**: youtube-transcript-api, yt-dlp, manual scraping
- **Proxy Support**: Network restrictions handling
- **Error Handling**: Graceful fallbacks and comprehensive error messages

## Development Workflow

### Adding New Features
1. **Routes**: Add to appropriate blueprint in `src/routes/`
2. **Business Logic**: Create modules in `src/` or extend existing ones
3. **Utilities**: Add helper functions to `src/utils/helpers.py`
4. **Configuration**: Add environment variables to `src/config.py`
5. **Database**: Add SQL migrations to `sql/`
6. **Templates**: Add HTML templates to `templates/`

### Testing
```bash
# Test module imports
python3 -c "from app import create_app; app = create_app(); print('✓ App created successfully')"

# Test specific modules
python3 -c "from src.video_processing import video_processor; print('✓ Video processor available')"
python3 -c "from src.youtube_api import youtube_api; print('✓ YouTube API available')"

# Test new modular components
python3 -c "from src.transcript_extractor import transcript_extractor; print('✓ Transcript extractor available')"
python3 -c "from src.chapter_extractor import chapter_extractor; print('✓ Chapter extractor available')"
python3 -c "from src.summarizer import summarizer; print('✓ AI summarizer available')"
python3 -c "from src.transcript_formatter import transcript_formatter; print('✓ Transcript formatter available')"
python3 -c "from src.snippet_manager import snippet_manager; print('✓ Snippet manager available')"
```

## Configuration

### Environment Variables
```bash
# OpenAI Configuration
OPENAI_API_KEY=your_openai_api_key
OPENAI_MODEL=gpt-4.1
OPENAI_MAX_TOKENS=100000
OPENAI_TEMPERATURE=0.7

# Supabase Configuration
SUPABASE_URL=your_supabase_url
SUPABASE_KEY=your_supabase_anon_key

# YouTube Data API
YOUTUBE_API_KEY=your_youtube_api_key

# Optional Proxy
YOUTUBE_PROXY=proxy_ip:8080

# Flask Configuration
FLASK_HOST=0.0.0.0
FLASK_PORT=33079
FLASK_DEBUG=True
```

### Database Setup
```bash
# Run database schema in Supabase SQL editor
sql/create_tables.sql
```

## Deployment

### Development
```bash
# Install dependencies
pip install -r requirements.txt

# Setup environment
cp .env.example .env
# Edit .env with your API keys

# Run application
python3 app.py
```

### Docker
```bash
# Build image
docker build -t youtube-deep-summary .

# Run container
docker run -p 33079:33079 -e OPENAI_API_KEY=your_key youtube-deep-summary
```

## Architecture Benefits

✅ **Modular Design**: Clean separation of concerns with Flask blueprints and isolated components  
✅ **Scalable Structure**: Easy to add new features and maintain existing code  
✅ **Industry Standards**: Follows Python project conventions  
✅ **Developer Friendly**: Clear file organization and comprehensive documentation  
✅ **Testable**: Isolated modules for easier testing and debugging  
✅ **Maintainable**: Logical grouping of related functionality  
✅ **Reusable Components**: Independent modules for transcript extraction, chapter extraction, and summarization  
✅ **Separation of Concerns**: Each module has a single, well-defined responsibility  
✅ **Easy to Extend**: New processing methods can be added without affecting existing functionality  

## New Modular Components Architecture

### Separated Core Components

The application now features a clean modular architecture with separated components:

#### `src/transcript_extractor.py`
**Purpose**: Handles YouTube transcript extraction with multiple methods and language fallback.

**Key Features**:
- Uses `youtube-transcript-api` with proxy support
- Automatic language detection and fallback
- Multiple language support with preference for English
- Comprehensive error handling and logging

**Usage Example**:
```python
from src.transcript_extractor import transcript_extractor

# Extract transcript with automatic language detection
transcript = transcript_extractor.extract_transcript('VIDEO_ID')

# Get available languages
languages = transcript_extractor.get_available_languages('VIDEO_ID')

# Extract in specific language
transcript = transcript_extractor.extract_transcript_in_language('VIDEO_ID', 'es')
```

#### `src/chapter_extractor.py`
**Purpose**: Extracts video chapters and metadata using yt-dlp.

**Key Features**:
- Comprehensive video information extraction
- Chapter detection and formatting
- Proxy support for restricted environments
- Fallback methods for chapter parsing
- Video metadata extraction (title, duration, channel info)

**Usage Example**:
```python
from src.chapter_extractor import chapter_extractor

# Extract complete video information
video_info = chapter_extractor.extract_video_info('VIDEO_ID')

# Extract only chapters
chapters = chapter_extractor.extract_chapters_only('VIDEO_ID')

# Parse chapters from description
chapters = chapter_extractor.parse_chapters_from_description(description_text)
```

#### `src/summarizer.py`
**Purpose**: AI-powered transcript summarization using OpenAI GPT-4.1.

**Key Features**:
- Chapter-aware summarization with enhanced prompts
- Multiple output formats and styles
- Clickable chapter links generation
- Video metadata integration
- Efficient token usage and context management

**Usage Example**:
```python
from src.summarizer import summarizer

# Basic summarization
summary = summarizer.summarize_with_openai(transcript_content)

# Chapter-aware summarization
summary = summarizer.summarize_with_openai(
    transcript_content, 
    chapters=chapters, 
    video_id='VIDEO_ID',
    video_info=video_info
)

# Check if configured
if summarizer.is_configured():
    print("OpenAI API available")
```

#### `src/transcript_formatter.py`
**Purpose**: Multiple transcript formatting options for different use cases.

**Key Features**:
- Readability formatting with paragraph grouping
- Chapter-organized transcript display
- SRT subtitle format generation
- Timestamp formatting options
- Chapter navigation generation

**Usage Example**:
```python
from src.transcript_formatter import transcript_formatter

# Format for readability
readable = transcript_formatter.format_for_readability(transcript, chapters)

# Format with regular timestamps
timestamped = transcript_formatter.format_with_timestamps(transcript, interval_seconds=30)

# Generate SRT format
srt_content = transcript_formatter.format_as_srt(transcript)

# Create chapter navigation
chapter_nav = transcript_formatter.create_chapter_navigation(chapters, video_id)
```

#### `src/snippet_manager.py`
**Purpose**: Handles business logic for memory snippets including creation, grouping, filtering, and validation.

**Key Features**:
- Snippet creation with input validation and content processing
- Grouping snippets by channel and video with sorting
- Search functionality across snippet content and tags
- Statistics calculation with tag analysis
- Clean separation between business logic and database operations

**Usage Example**:
```python
from src.snippet_manager import snippet_manager

# Create a new snippet
result = snippet_manager.create_snippet(
    video_id='VIDEO_ID',
    snippet_text='Selected text content',
    context_before='Text before selection',
    context_after='Text after selection',
    tags=['important', 'key-point']
)

# Get snippets for a video
snippets = snippet_manager.get_snippets_by_video('VIDEO_ID')

# Get snippets for a channel
result = snippet_manager.get_snippets_by_channel_handle('channelhandle')

# Group snippets by channel
all_snippets = snippet_manager.storage.get_memory_snippets(limit=1000)
channels = snippet_manager.group_snippets_by_channel(all_snippets)

# Search snippets
matching_snippets = snippet_manager.search_snippets('search query')

# Get statistics
stats = snippet_manager.get_snippet_statistics()
```

### Component Integration

The modular components work together through the orchestration layer:

```python
# In src/video_processing.py
class VideoProcessor:
    def __init__(self):
        self.transcript_extractor = transcript_extractor
        self.chapter_extractor = chapter_extractor
        self.summarizer = summarizer
        self.transcript_formatter = transcript_formatter
    
    def process_video_complete(self, video_id, channel_id=None):
        # Extract transcript
        transcript = self.transcript_extractor.extract_transcript(video_id)
        
        # Extract video info and chapters
        video_info = self.chapter_extractor.extract_video_info(video_id)
        
        # Format transcript
        formatted_transcript = self.transcript_formatter.format_for_readability(
            transcript, video_info.get('chapters')
        )
        
        # Generate summary if configured
        if self.summarizer.is_configured():
            summary = self.summarizer.summarize_with_openai(
                formatted_transcript, 
                chapters=video_info.get('chapters'),
                video_id=video_id,
                video_info=video_info
            )
        
        return result
```

### Benefits of Modular Architecture

✅ **Single Responsibility**: Each module has one clear purpose  
✅ **Reusability**: Components can be used independently  
✅ **Testability**: Isolated testing of individual components  
✅ **Maintainability**: Easier to update and extend functionality  
✅ **Flexibility**: Easy to swap implementations or add new methods  
✅ **Clean Dependencies**: Clear separation between different concerns  

This structure provides a solid foundation for continued development and maintenance of the YouTube Deep Summary application.